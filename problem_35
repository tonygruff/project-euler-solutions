#Project Euler Problem 35 Solution

#Written in R using RStudio

#Functions---------------------------------------------------------------------------------------------------------------

countDigits = function(n){
  return(floor(log10(abs(n))) + 1)
}

reverseVector = function(v){
  reverseV = c()
  
  for(i in 1:length(v)){
    reverseV[i] = as.integer(v[length(v) - i + 1])
  }
  
  return(reverseV)
}

vectToNum = function(v){
  newV = reverseVector(v)
  
  n = 0
  
  for(i in 1:length(newV)){
    n = n + newV[i] * 10^(i-1)
  }
  
  return(n)
}

shoveVect = function(v){
  newV = 1:(length(v) + 1)
  
  newV[1] = 0
  
  if(length(v) != 0){
    for(i in 1:length(v)){
      newV[i + 1] = v[i]
    }
    
    return(newV)
  } else {
    return(newV)
  }
}

isCircularPrime = function(p){
  if(!is_prime(p)){
    return(FALSE)
  }
  
  d = countDigits(p)
  pVect = numToVect(p)
  
  for(i in 1:(d-1)){
    pVect = shoveVect(pVect)
    pVect[1] = pVect[length(pVect)]
    pVect = pVect[-length(pVect)]
    
    if(!is_prime(vectToNum(pVect))){
      return(FALSE)
    }
  }
  
  return(TRUE)
}

#Solution-------------------------------------------------------

count = 0

for(i in 100:999999){
  if(!is_prime(i)){
    next
  }
  
  if(isCircularPrime(i)){
    count = count + 1
  }
}

count + 13

